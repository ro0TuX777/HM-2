{% extends "frontend/base.html.jinja2" %}

{% block content %}
<div class="min-h-screen bg-gray-50 p-6">
    <div class="max-w-7xl mx-auto space-y-6">
        <!-- Top Metrics Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Composite Z-Score Summary -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-lg font-medium text-gray-900">Composite Z-Score</h3>
                <div class="mt-2">
                    <div class="text-3xl font-bold" id="composite-zscore">--</div>
                    <div class="text-sm text-green-600" id="zscore-status">Normal - Within Expected Range</div>
                </div>
            </div>

            <!-- Deviation Severity - Gauge Chart -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-lg font-medium text-gray-900">Deviation Severity</h3>
                <div class="h-48 w-48 mx-auto">
                    <canvas id="deviation-gauge-chart"></canvas>
                </div>
            </div>

            <!-- System Status -->
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-lg font-medium text-gray-900">System Stability</h3>
                <div class="mt-2">
                    <div class="text-3xl font-bold" id="system-stability">--</div>
                    <div class="text-sm text-gray-600">Z-score based assessment</div>
                </div>
            </div>
        </div>

        <!-- Z-Score Metrics Overview Heatmap -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Z-Score Metrics Overview</h3>
            <div class="h-64 relative">
                <canvas id="zscore-heatmap-chart"></canvas>
            </div>
        </div>

        <!-- Device Performance Z-Scores -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Device Metrics Z-Scores</h3>
            <div class="h-64 relative">
                <canvas id="device-metrics-chart"></canvas>
            </div>
        </div>

        <!-- Device List and Details -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Device List -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow">
                    <div class="px-4 py-5 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Devices by Z-Score</h3>
                    </div>
                    <div class="p-4">
                        <div id="device-list" class="space-y-4">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Z-Score Legend -->
            <div>
                <div class="bg-white rounded-lg shadow">
                    <div class="px-4 py-5 border-b border-gray-200">
                        <h3 class="text-lg font-medium text-gray-900">Z-Score Legend</h3>
                    </div>
                    <div class="p-4">
                        <div class="space-y-4">
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 rounded-full bg-green-500"></div>
                                <div>
                                    <p class="font-medium">Normal Range</p>
                                    <p class="text-sm text-gray-500">|Z| ≤ 1</p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
                                <div>
                                    <p class="font-medium">Moderate Deviation</p>
                                    <p class="text-sm text-gray-500">1 < |Z| ≤ 2</p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 rounded-full bg-orange-500"></div>
                                <div>
                                    <p class="font-medium">Significant Deviation</p>
                                    <p class="text-sm text-gray-500">2 < |Z| ≤ 3</p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 rounded-full bg-red-500"></div>
                                <div>
                                    <p class="font-medium">Extreme Deviation</p>
                                    <p class="text-sm text-gray-500">|Z| > 3</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Local Chart.js -->
<script src="{{ url_for('static', filename='js/libs/chart.min.js') }}"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize charts
    const gaugeCtx = document.getElementById('deviation-gauge-chart').getContext('2d');
    const zscoreCtx = document.getElementById('zscore-heatmap-chart').getContext('2d');
    const metricsCtx = document.getElementById('device-metrics-chart').getContext('2d');

    const deviationGaugeChart = new Chart(gaugeCtx, {
        type: 'doughnut',
        data: {
            labels: ['Normal', 'Moderate', 'Significant', 'Extreme'],
            datasets: [{
                data: [40, 30, 20, 10], // Example percentages
                backgroundColor: ['#22c55e', '#facc15', '#f97316', '#dc2626'],
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
            },
            cutout: '70%',
        }
    });

    const zscoreHeatmapChart = new Chart(zscoreCtx, {
        type: 'heatmap',
        data: {
            labels: [],
            datasets: [{
                label: 'Z-Scores Overview',
                data: [],
                backgroundColor: 'rgba(59, 130, 246, 0.5)'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    mode: 'nearest',
                    intersect: true
                }
            }
        }
    });

    const metricsChart = new Chart(metricsCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [
                {
                    label: 'CPU Usage',
                    data: [],
                    borderColor: 'rgb(99, 102, 241)',
                    tension: 0.4
                },
                {
                    label: 'Memory Usage',
                    data: [],
                    borderColor: 'rgb(52, 211, 153)',
                    tension: 0.4
                },
                {
                    label: 'Disk Usage',
                    data: [],
                    borderColor: 'rgb(251, 146, 60)',
                    tension: 0.4
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    grid: {
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        drawBorder: false
                    }
                }
            }
        }
    });

    function getZScoreColor(zscore) {
        const absScore = Math.abs(zscore);
        if (absScore > 3) return 'text-red-500';
        if (absScore > 2) return 'text-orange-500';
        if (absScore > 1) return 'text-yellow-500';
        return 'text-green-500';
    }

    function updateDashboard() {
        fetch('/cip_impact/zscore/metrics')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const timestamp = new Date().toLocaleTimeString();
                    
                    // Update summary cards
                    document.getElementById('composite-zscore').textContent = 
                        data.composite_zscore?.toFixed(2) || '--';
                    document.getElementById('deviation-severity').textContent = 
                        data.deviation_severity ? `${(data.deviation_severity * 100).toFixed(1)}%` : '--';
                    document.getElementById('system-stability').textContent = 
                        data.system_stability || '--';

                    // Update charts
                    zscoreHeatmapChart.data.labels.push(timestamp);
                    metricsChart.data.labels.push(timestamp);

                    // Keep last 20 points
                    if (zscoreHeatmapChart.data.labels.length > 20) {
                        zscoreHeatmapChart.data.labels.shift();
                        zscoreHeatmapChart.data.datasets.forEach(dataset => dataset.data.shift());
                        metricsChart.data.labels.shift();
                        metricsChart.data.datasets.forEach(dataset => dataset.data.shift());
                    }

                    // Update Z-score data
                    if (data.zscores) {
                        zscoreHeatmapChart.data.datasets[0].data.push(data.zscores.cpu);
                        zscoreHeatmapChart.data.datasets[1].data.push(data.zscores.memory);
                        zscoreHeatmapChart.data.datasets[2].data.push(data.zscores.disk);
                    }

                    // Update metrics data
                    if (data.metrics) {
                        metricsChart.data.datasets[0].data.push(data.metrics.cpu);
                        metricsChart.data.datasets[1].data.push(data.metrics.memory);
                        metricsChart.data.datasets[2].data.push(data.metrics.disk);
                    }

                    zscoreHeatmapChart.update();
                    metricsChart.update();

                    // Update device list
                    const deviceList = document.getElementById('device-list');
                    if (data.devices) {
                        deviceList.innerHTML = data.devices
                            .sort((a, b) => Math.abs(b.zscore) - Math.abs(a.zscore))
                            .map(device => `
                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div>
                                        <div class="font-medium">${device.name}</div>
                                        <div class="text-sm text-gray-500">${device.type}</div>
                                    </div>
                                    <div class="text-right">
                                        <div class="${getZScoreColor(device.zscore)} font-medium">
                                            Z-Score: ${device.zscore.toFixed(2)}
                                        </div>
                                    </div>
                                </div>
                            `).join('');
                    }
                }
            })
            .catch(error => console.error('Error fetching metrics:', error));
    }

    // Initial update
    updateDashboard();

    // Update every 30 seconds
    setInterval(updateDashboard, 30000);
});
</script>
{% endblock %}
